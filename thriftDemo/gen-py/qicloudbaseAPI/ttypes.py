#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class QiException(TException):
  """
  Attributes:
   - errorCode
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errorCode', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, errorCode=None, message=None,):
    self.errorCode = errorCode
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiException')
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I32, 1)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiVersionInfo:
  """
  Attributes:
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'version', None, None, ), # 1
  )

  def __init__(self, version=None,):
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiVersionInfo')
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 1)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiHostResInfo:
  """
  Attributes:
   - model
   - cpus
   - mhz
   - nodes
   - sockets
   - cores
   - threads
   - runningVMs
   - memory
   - freememory
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'model', None, None, ), # 1
    (2, TType.I32, 'cpus', None, None, ), # 2
    (3, TType.I32, 'mhz', None, None, ), # 3
    (4, TType.I32, 'nodes', None, None, ), # 4
    (5, TType.I32, 'sockets', None, None, ), # 5
    (6, TType.I32, 'cores', None, None, ), # 6
    (7, TType.I32, 'threads', None, None, ), # 7
    (8, TType.I32, 'runningVMs', None, None, ), # 8
    (9, TType.I64, 'memory', None, None, ), # 9
    (10, TType.I64, 'freememory', None, None, ), # 10
  )

  def __init__(self, model=None, cpus=None, mhz=None, nodes=None, sockets=None, cores=None, threads=None, runningVMs=None, memory=None, freememory=None,):
    self.model = model
    self.cpus = cpus
    self.mhz = mhz
    self.nodes = nodes
    self.sockets = sockets
    self.cores = cores
    self.threads = threads
    self.runningVMs = runningVMs
    self.memory = memory
    self.freememory = freememory

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.model = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cpus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.mhz = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.nodes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sockets = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cores = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.threads = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.runningVMs = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.memory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.freememory = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiHostResInfo')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRING, 1)
      oprot.writeString(self.model)
      oprot.writeFieldEnd()
    if self.cpus is not None:
      oprot.writeFieldBegin('cpus', TType.I32, 2)
      oprot.writeI32(self.cpus)
      oprot.writeFieldEnd()
    if self.mhz is not None:
      oprot.writeFieldBegin('mhz', TType.I32, 3)
      oprot.writeI32(self.mhz)
      oprot.writeFieldEnd()
    if self.nodes is not None:
      oprot.writeFieldBegin('nodes', TType.I32, 4)
      oprot.writeI32(self.nodes)
      oprot.writeFieldEnd()
    if self.sockets is not None:
      oprot.writeFieldBegin('sockets', TType.I32, 5)
      oprot.writeI32(self.sockets)
      oprot.writeFieldEnd()
    if self.cores is not None:
      oprot.writeFieldBegin('cores', TType.I32, 6)
      oprot.writeI32(self.cores)
      oprot.writeFieldEnd()
    if self.threads is not None:
      oprot.writeFieldBegin('threads', TType.I32, 7)
      oprot.writeI32(self.threads)
      oprot.writeFieldEnd()
    if self.runningVMs is not None:
      oprot.writeFieldBegin('runningVMs', TType.I32, 8)
      oprot.writeI32(self.runningVMs)
      oprot.writeFieldEnd()
    if self.memory is not None:
      oprot.writeFieldBegin('memory', TType.I64, 9)
      oprot.writeI64(self.memory)
      oprot.writeFieldEnd()
    if self.freememory is not None:
      oprot.writeFieldBegin('freememory', TType.I64, 10)
      oprot.writeI64(self.freememory)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiHostInfo:
  """
  Attributes:
   - id
   - name
   - ip
   - clusterid
   - state
   - macaddr
   - maxvms
   - createtime
   - primaryPoolState
   - secondaryPoolState
   - resInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'ip', None, None, ), # 3
    (4, TType.STRING, 'clusterid', None, None, ), # 4
    (5, TType.STRING, 'state', None, None, ), # 5
    (6, TType.STRING, 'macaddr', None, None, ), # 6
    (7, TType.I32, 'maxvms', None, None, ), # 7
    (8, TType.STRING, 'createtime', None, None, ), # 8
    (9, TType.STRING, 'primaryPoolState', None, None, ), # 9
    (10, TType.STRING, 'secondaryPoolState', None, None, ), # 10
    (11, TType.STRUCT, 'resInfo', (QiHostResInfo, QiHostResInfo.thrift_spec), None, ), # 11
  )

  def __init__(self, id=None, name=None, ip=None, clusterid=None, state=None, macaddr=None, maxvms=None, createtime=None, primaryPoolState=None, secondaryPoolState=None, resInfo=None,):
    self.id = id
    self.name = name
    self.ip = ip
    self.clusterid = clusterid
    self.state = state
    self.macaddr = macaddr
    self.maxvms = maxvms
    self.createtime = createtime
    self.primaryPoolState = primaryPoolState
    self.secondaryPoolState = secondaryPoolState
    self.resInfo = resInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.clusterid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.state = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.macaddr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.maxvms = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.createtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.primaryPoolState = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.secondaryPoolState = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.resInfo = QiHostResInfo()
          self.resInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiHostInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 3)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.clusterid is not None:
      oprot.writeFieldBegin('clusterid', TType.STRING, 4)
      oprot.writeString(self.clusterid)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRING, 5)
      oprot.writeString(self.state)
      oprot.writeFieldEnd()
    if self.macaddr is not None:
      oprot.writeFieldBegin('macaddr', TType.STRING, 6)
      oprot.writeString(self.macaddr)
      oprot.writeFieldEnd()
    if self.maxvms is not None:
      oprot.writeFieldBegin('maxvms', TType.I32, 7)
      oprot.writeI32(self.maxvms)
      oprot.writeFieldEnd()
    if self.createtime is not None:
      oprot.writeFieldBegin('createtime', TType.STRING, 8)
      oprot.writeString(self.createtime)
      oprot.writeFieldEnd()
    if self.primaryPoolState is not None:
      oprot.writeFieldBegin('primaryPoolState', TType.STRING, 9)
      oprot.writeString(self.primaryPoolState)
      oprot.writeFieldEnd()
    if self.secondaryPoolState is not None:
      oprot.writeFieldBegin('secondaryPoolState', TType.STRING, 10)
      oprot.writeString(self.secondaryPoolState)
      oprot.writeFieldEnd()
    if self.resInfo is not None:
      oprot.writeFieldBegin('resInfo', TType.STRUCT, 11)
      self.resInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiTemplateInfo:
  """
  Attributes:
   - id
   - name
   - fatherid
   - type
   - OStype
   - OSversion
   - state
   - storageid
   - username
   - ispublic
   - createtime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'fatherid', None, None, ), # 3
    (4, TType.STRING, 'type', None, None, ), # 4
    (5, TType.STRING, 'OStype', None, None, ), # 5
    (6, TType.STRING, 'OSversion', None, None, ), # 6
    (7, TType.STRING, 'state', None, None, ), # 7
    (8, TType.STRING, 'storageid', None, None, ), # 8
    (9, TType.STRING, 'username', None, None, ), # 9
    (10, TType.I32, 'ispublic', None, None, ), # 10
    (11, TType.STRING, 'createtime', None, None, ), # 11
  )

  def __init__(self, id=None, name=None, fatherid=None, type=None, OStype=None, OSversion=None, state=None, storageid=None, username=None, ispublic=None, createtime=None,):
    self.id = id
    self.name = name
    self.fatherid = fatherid
    self.type = type
    self.OStype = OStype
    self.OSversion = OSversion
    self.state = state
    self.storageid = storageid
    self.username = username
    self.ispublic = ispublic
    self.createtime = createtime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fatherid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.OStype = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.OSversion = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.state = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.storageid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.ispublic = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.createtime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiTemplateInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.fatherid is not None:
      oprot.writeFieldBegin('fatherid', TType.STRING, 3)
      oprot.writeString(self.fatherid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 4)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.OStype is not None:
      oprot.writeFieldBegin('OStype', TType.STRING, 5)
      oprot.writeString(self.OStype)
      oprot.writeFieldEnd()
    if self.OSversion is not None:
      oprot.writeFieldBegin('OSversion', TType.STRING, 6)
      oprot.writeString(self.OSversion)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRING, 7)
      oprot.writeString(self.state)
      oprot.writeFieldEnd()
    if self.storageid is not None:
      oprot.writeFieldBegin('storageid', TType.STRING, 8)
      oprot.writeString(self.storageid)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 9)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.ispublic is not None:
      oprot.writeFieldBegin('ispublic', TType.I32, 10)
      oprot.writeI32(self.ispublic)
      oprot.writeFieldEnd()
    if self.createtime is not None:
      oprot.writeFieldBegin('createtime', TType.STRING, 11)
      oprot.writeString(self.createtime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiStorageInfo:
  """
  Attributes:
   - id
   - name
   - type
   - storageip
   - storagetype
   - sharepath
   - mountpath
   - state
   - createtime
   - capacity
   - allocation
   - available
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.STRING, 'storageip', None, None, ), # 4
    (5, TType.I32, 'storagetype', None, None, ), # 5
    (6, TType.STRING, 'sharepath', None, None, ), # 6
    (7, TType.STRING, 'mountpath', None, None, ), # 7
    (8, TType.STRING, 'state', None, None, ), # 8
    (9, TType.STRING, 'createtime', None, None, ), # 9
    (10, TType.I64, 'capacity', None, None, ), # 10
    (11, TType.I64, 'allocation', None, None, ), # 11
    (12, TType.I64, 'available', None, None, ), # 12
  )

  def __init__(self, id=None, name=None, type=None, storageip=None, storagetype=None, sharepath=None, mountpath=None, state=None, createtime=None, capacity=None, allocation=None, available=None,):
    self.id = id
    self.name = name
    self.type = type
    self.storageip = storageip
    self.storagetype = storagetype
    self.sharepath = sharepath
    self.mountpath = mountpath
    self.state = state
    self.createtime = createtime
    self.capacity = capacity
    self.allocation = allocation
    self.available = available

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.storageip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.storagetype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sharepath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mountpath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.state = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.createtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.capacity = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.allocation = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.available = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiStorageInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.storageip is not None:
      oprot.writeFieldBegin('storageip', TType.STRING, 4)
      oprot.writeString(self.storageip)
      oprot.writeFieldEnd()
    if self.storagetype is not None:
      oprot.writeFieldBegin('storagetype', TType.I32, 5)
      oprot.writeI32(self.storagetype)
      oprot.writeFieldEnd()
    if self.sharepath is not None:
      oprot.writeFieldBegin('sharepath', TType.STRING, 6)
      oprot.writeString(self.sharepath)
      oprot.writeFieldEnd()
    if self.mountpath is not None:
      oprot.writeFieldBegin('mountpath', TType.STRING, 7)
      oprot.writeString(self.mountpath)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRING, 8)
      oprot.writeString(self.state)
      oprot.writeFieldEnd()
    if self.createtime is not None:
      oprot.writeFieldBegin('createtime', TType.STRING, 9)
      oprot.writeString(self.createtime)
      oprot.writeFieldEnd()
    if self.capacity is not None:
      oprot.writeFieldBegin('capacity', TType.I64, 10)
      oprot.writeI64(self.capacity)
      oprot.writeFieldEnd()
    if self.allocation is not None:
      oprot.writeFieldBegin('allocation', TType.I64, 11)
      oprot.writeI64(self.allocation)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I64, 12)
      oprot.writeI64(self.available)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiDiskInfo:
  """
  Attributes:
   - id
   - instanceid
   - name
   - diskSize
   - diskMode
   - createtime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'instanceid', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'diskSize', None, None, ), # 4
    (5, TType.STRING, 'diskMode', None, None, ), # 5
    (6, TType.STRING, 'createtime', None, None, ), # 6
  )

  def __init__(self, id=None, instanceid=None, name=None, diskSize=None, diskMode=None, createtime=None,):
    self.id = id
    self.instanceid = instanceid
    self.name = name
    self.diskSize = diskSize
    self.diskMode = diskMode
    self.createtime = createtime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.instanceid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.diskSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.diskMode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.createtime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiDiskInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.instanceid is not None:
      oprot.writeFieldBegin('instanceid', TType.STRING, 2)
      oprot.writeString(self.instanceid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.diskSize is not None:
      oprot.writeFieldBegin('diskSize', TType.I32, 4)
      oprot.writeI32(self.diskSize)
      oprot.writeFieldEnd()
    if self.diskMode is not None:
      oprot.writeFieldBegin('diskMode', TType.STRING, 5)
      oprot.writeString(self.diskMode)
      oprot.writeFieldEnd()
    if self.createtime is not None:
      oprot.writeFieldBegin('createtime', TType.STRING, 6)
      oprot.writeString(self.createtime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiInterfaceInfo:
  """
  Attributes:
   - id
   - instanceid
   - type
   - mac
   - mode
   - ip
   - createtime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'instanceid', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.STRING, 'mac', None, None, ), # 4
    (5, TType.STRING, 'mode', None, None, ), # 5
    (6, TType.STRING, 'ip', None, None, ), # 6
    (7, TType.STRING, 'createtime', None, None, ), # 7
  )

  def __init__(self, id=None, instanceid=None, type=None, mac=None, mode=None, ip=None, createtime=None,):
    self.id = id
    self.instanceid = instanceid
    self.type = type
    self.mac = mac
    self.mode = mode
    self.ip = ip
    self.createtime = createtime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.instanceid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.createtime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiInterfaceInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.instanceid is not None:
      oprot.writeFieldBegin('instanceid', TType.STRING, 2)
      oprot.writeString(self.instanceid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 4)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.STRING, 5)
      oprot.writeString(self.mode)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 6)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.createtime is not None:
      oprot.writeFieldBegin('createtime', TType.STRING, 7)
      oprot.writeString(self.createtime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiInstanceBaseInfo:
  """
  Attributes:
   - id
   - name
   - imgid
   - isoid
   - cpuType
   - cpuCores
   - cpuThreads
   - cpuSockets
   - memorySize
   - diskSize
   - diskMode
   - displayProcotol
   - createtime
   - diskInfo
   - i32erfaceInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'imgid', None, None, ), # 3
    (4, TType.STRING, 'isoid', None, None, ), # 4
    (5, TType.STRING, 'cpuType', None, None, ), # 5
    (6, TType.I16, 'cpuCores', None, None, ), # 6
    (7, TType.I16, 'cpuThreads', None, None, ), # 7
    (8, TType.I16, 'cpuSockets', None, None, ), # 8
    (9, TType.I32, 'memorySize', None, None, ), # 9
    (10, TType.I32, 'diskSize', None, None, ), # 10
    (11, TType.I16, 'diskMode', None, None, ), # 11
    (12, TType.I16, 'displayProcotol', None, None, ), # 12
    (13, TType.STRING, 'createtime', None, None, ), # 13
    (14, TType.LIST, 'diskInfo', (TType.STRUCT,(QiDiskInfo, QiDiskInfo.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'i32erfaceInfo', (TType.STRUCT,(QiInterfaceInfo, QiInterfaceInfo.thrift_spec)), None, ), # 15
  )

  def __init__(self, id=None, name=None, imgid=None, isoid=None, cpuType=None, cpuCores=None, cpuThreads=None, cpuSockets=None, memorySize=None, diskSize=None, diskMode=None, displayProcotol=None, createtime=None, diskInfo=None, i32erfaceInfo=None,):
    self.id = id
    self.name = name
    self.imgid = imgid
    self.isoid = isoid
    self.cpuType = cpuType
    self.cpuCores = cpuCores
    self.cpuThreads = cpuThreads
    self.cpuSockets = cpuSockets
    self.memorySize = memorySize
    self.diskSize = diskSize
    self.diskMode = diskMode
    self.displayProcotol = displayProcotol
    self.createtime = createtime
    self.diskInfo = diskInfo
    self.i32erfaceInfo = i32erfaceInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.imgid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.isoid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.cpuType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.cpuCores = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.cpuThreads = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.cpuSockets = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.memorySize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.diskSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.diskMode = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.displayProcotol = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.createtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.diskInfo = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = QiDiskInfo()
            _elem5.read(iprot)
            self.diskInfo.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.i32erfaceInfo = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = QiInterfaceInfo()
            _elem11.read(iprot)
            self.i32erfaceInfo.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiInstanceBaseInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.imgid is not None:
      oprot.writeFieldBegin('imgid', TType.STRING, 3)
      oprot.writeString(self.imgid)
      oprot.writeFieldEnd()
    if self.isoid is not None:
      oprot.writeFieldBegin('isoid', TType.STRING, 4)
      oprot.writeString(self.isoid)
      oprot.writeFieldEnd()
    if self.cpuType is not None:
      oprot.writeFieldBegin('cpuType', TType.STRING, 5)
      oprot.writeString(self.cpuType)
      oprot.writeFieldEnd()
    if self.cpuCores is not None:
      oprot.writeFieldBegin('cpuCores', TType.I16, 6)
      oprot.writeI16(self.cpuCores)
      oprot.writeFieldEnd()
    if self.cpuThreads is not None:
      oprot.writeFieldBegin('cpuThreads', TType.I16, 7)
      oprot.writeI16(self.cpuThreads)
      oprot.writeFieldEnd()
    if self.cpuSockets is not None:
      oprot.writeFieldBegin('cpuSockets', TType.I16, 8)
      oprot.writeI16(self.cpuSockets)
      oprot.writeFieldEnd()
    if self.memorySize is not None:
      oprot.writeFieldBegin('memorySize', TType.I32, 9)
      oprot.writeI32(self.memorySize)
      oprot.writeFieldEnd()
    if self.diskSize is not None:
      oprot.writeFieldBegin('diskSize', TType.I32, 10)
      oprot.writeI32(self.diskSize)
      oprot.writeFieldEnd()
    if self.diskMode is not None:
      oprot.writeFieldBegin('diskMode', TType.I16, 11)
      oprot.writeI16(self.diskMode)
      oprot.writeFieldEnd()
    if self.displayProcotol is not None:
      oprot.writeFieldBegin('displayProcotol', TType.I16, 12)
      oprot.writeI16(self.displayProcotol)
      oprot.writeFieldEnd()
    if self.createtime is not None:
      oprot.writeFieldBegin('createtime', TType.STRING, 13)
      oprot.writeString(self.createtime)
      oprot.writeFieldEnd()
    if self.diskInfo is not None:
      oprot.writeFieldBegin('diskInfo', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.diskInfo))
      for iter12 in self.diskInfo:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.i32erfaceInfo is not None:
      oprot.writeFieldBegin('i32erfaceInfo', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.i32erfaceInfo))
      for iter13 in self.i32erfaceInfo:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QiInstanceInfo:
  """
  Attributes:
   - hostInfo
   - baseInfo
   - procotol
   - state
   - port1
   - port2
   - passwd
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'hostInfo', (QiHostInfo, QiHostInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'baseInfo', (QiInstanceBaseInfo, QiInstanceBaseInfo.thrift_spec), None, ), # 2
    (3, TType.I32, 'procotol', None, None, ), # 3
    (4, TType.I32, 'state', None, None, ), # 4
    (5, TType.I32, 'port1', None, None, ), # 5
    (6, TType.I32, 'port2', None, None, ), # 6
    (7, TType.STRING, 'passwd', None, None, ), # 7
  )

  def __init__(self, hostInfo=None, baseInfo=None, procotol=None, state=None, port1=None, port2=None, passwd=None,):
    self.hostInfo = hostInfo
    self.baseInfo = baseInfo
    self.procotol = procotol
    self.state = state
    self.port1 = port1
    self.port2 = port2
    self.passwd = passwd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.hostInfo = QiHostInfo()
          self.hostInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.baseInfo = QiInstanceBaseInfo()
          self.baseInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.procotol = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.port1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.port2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.passwd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QiInstanceInfo')
    if self.hostInfo is not None:
      oprot.writeFieldBegin('hostInfo', TType.STRUCT, 1)
      self.hostInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.baseInfo is not None:
      oprot.writeFieldBegin('baseInfo', TType.STRUCT, 2)
      self.baseInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.procotol is not None:
      oprot.writeFieldBegin('procotol', TType.I32, 3)
      oprot.writeI32(self.procotol)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 4)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.port1 is not None:
      oprot.writeFieldBegin('port1', TType.I32, 5)
      oprot.writeI32(self.port1)
      oprot.writeFieldEnd()
    if self.port2 is not None:
      oprot.writeFieldBegin('port2', TType.I32, 6)
      oprot.writeI32(self.port2)
      oprot.writeFieldEnd()
    if self.passwd is not None:
      oprot.writeFieldBegin('passwd', TType.STRING, 7)
      oprot.writeString(self.passwd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
